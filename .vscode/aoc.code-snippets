{
	// Place your adventOfCode workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"aoc template":{
		"description": "Basic template to solve Advent of Code problems",
		"isFileTemplate": true,
		"scope": "erlang",
		"prefix": "aoc_template",
		"body":[
			"-module($TM_FILENAME_BASE).",
			"-behaviour(aoc_solution).",
			"",
			"-export([run/0, run/2]).",
			"",
			"%% callbacks",
			"-export([info/0, star1/1, star2/1, read/1]).",
			"",
			"info() ->",
			"    Examples = [",
			"        {\"examples/${1}/day${2}_ex.txt\", star1, unknown},",
			"        {\"examples/${1}/day${2}_ex.txt\", star2, unknown}",
			"    ],",
			"",
			"    maps:merge(aoc_solution:default_info(), #{",
			"        problem => {${1:${TM_FILENAME_BASE/^aoc([0-9]*).*$/${1}/}}, ${2:${TM_FILENAME_BASE/^aoc[0-9]*_day([0-9]*)$/${1}/}}},",
			"        examples => Examples",
			"    }).",
			"",
			"run() ->",
			"    aoc_solution:run(?MODULE).",
			"",
			"run(StarOrStars, FileOrData) ->",
			"    aoc_solution:run(?MODULE, StarOrStars, FileOrData).",
			"",
			"star1(Data) ->",
			"    io:format(\"~s~n\", [Data]),",
			"    unknown.",
			"",
			"star2(Data) ->",
			"    Data,",
			"    unknown.",
		    "",
			"read(File) ->",
			"    tools:read_string(File)."
		]
	}

}